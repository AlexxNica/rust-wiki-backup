FIXME: This is just a dump of old information from the getting started page. It is likely incomplete and out of date.

h2. Windows

h3. Installing LLVM

h4. Downloading

If you have svn installed, you can get the proper revision using:
```sh
svn co -r142082 http://llvm.org/svn/llvm-project/llvm/trunk llvm
```

otherwise you can use a git mirror:

```sh
git clone http://llvm.org/git/llvm.git
```

h4. Installing

```sh
cd llvm
./configure --disable-bindings --enable-targets=x86 --enable-optimized
make
make install
```

(note: if you have a multi-core processor, it may help to use @make -j3@ (or 5 if you have a quad-core) to speed up the build process)

h3. Building Rust
```sh
git clone git://github.com/graydon/rust.git
cd rust
mkdir build
cd build
../configure
make
```

You should now have rustc.exe in build/stage3/bin

h2. *nix

h3. Installing LLVM

Rust requires a 3.1svn build of LLVM *at revision 142082*. Follow the instructions on "Clang's Getting Started page":http://clang.llvm.org/get_started.html to check out LLVM (and Clang, if you like), but don't follow the build instructions on that page -- see below.

```sh
svn co -r142082 http://llvm.org/svn/llvm-project/llvm/trunk llvm
```
Later revisions _might_ work, but since Rust is building against LLVM's trunk, not every revision will work correctly.  The revision number listed above is a minimum that's known to work.  If you're having trouble finding an LLVM revision that works, ask on IRC and somebody will tell you which revision is working for them.

h4. Building with clang (Experimental)

The Rust runtime can be built with clang, though it is only regularly tested on Mac and known to have problems on Linux. To do so you'll need to build clang from SVN along with LLVM. If you're using clang (*revision 138774*), you will also need to check out compiler-rt *revision 133487* (later revisions are broken):

```sh
cd llvm/projects
svn co -r133487 http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
```

```sh
cd llvm/tools
svn co -r138774 http://llvm.org/svn/llvm-project/cfe/trunk clang
```

When you run the Rust @configure@ script you will need to pass the @--enable-clang@ argument.

h4. Building LLVM

Because Rust doesn't support x86-64 yet, you may need to configure LLVM using some special flags. On the Mac, use:

```sh
cd llvm
CXX='g++ -m32' CC='gcc -m32' CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 ./configure --disable-bindings --{build,host,target}=i686-apple-darwin --enable-targets=x86,x86_64,cbe --enable-optimized
make
sudo make install
```

On 64-bit Linux, use:
```sh
cd llvm
CXX='g++ -m32' CC='gcc -m32' CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 ./configure --disable-bindings --{build,host,target}=i686-unknown-linux-gnu --enable-targets=x86,x86_64,cbe --enable-optimized
CXXFLAGS='-fno-omit-frame-pointer' make
sudo make install
```

(The `-fno-omit-frame-pointer` part is necessary if you want gdb backtraces when an LLVM assertion hits.)

On 32-bit Linux @./configure --enable-optimized; make; make install@ should be sufficient.  If you omit the @--enable-optimized@ flag, it'll work, but more slowly.

h3. Mingw-cross

Rust occasionally works under mingw-cross compilation on linux. This is *experimental* but can sometimes lead to a more pleasant windows development experience. To configure LLVM for this, do the following:

```sh
# assuming llvm is in $SRCROOT/llvm and rust in $SRCROOT/rust
sudo apt-get install wine1.2 mingw{,-binutils,-runtime} 
cd $SRCROOT
mkdir llvm-{build,inst}-mingw; cd llvm-build-mingw
STRIP=i586-mingw32msvc-strip NM=i586-mingw32msvc-nm CXX=i586-mingw32msvc-g++ CC=i586-mingw32msvc-gcc LD=i586-mingw32msvc-ld AS=i586-mingw32msvc-as RANLIB=i586-mingw32msvc-ranlib ../llvm/configure --prefix=$SRCROOT/llvm-inst-mingw32/ --disable-bindings --build=i686-unknown-linux-gnu --{host,target}=i586-mingw32 --enable-targets=x86,x86_64 --enable-optimized
make && make install
cd $SRCROOT/rust
mkdir mingw-build; cd mingw-build
CFG_LLVM_ROOT=$SRCROOT/llvm-inst-mingw32/ CFG_LLVM_CONFIG=$SRCROOT/llvm-inst-mingw32/bin/llvm-config ../configure --enable-mingw-cross
```
If you are tremendously lucky and patient, you may convince that to work. But as mentioned above, *experimental*. We'll support this when we can.
