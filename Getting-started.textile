h2. Prerequisites

Version numbers listed here are "what we're using"; the code may well work with earlier versions of these tools, but we don't know minimum version requirements.

* A recent Linux, OS X or Win32 system
* "Python 3.1":http://www.python.org/download/ (versions as old as Python 2.6.2 have also been used successfully)
* GNU make 3.81
* git 1.7
* g++ 4.4 at least on linux, 4.5 on win32, and the 4.x gcc in Apple's SDK for OS X.
* curl
* Valgrind 3.5 (recommended, but not required for Linux)
* Texinfo's makeinfo and/or texi2pdf commands (optional), if you wish to build HTML or PDF docs, respectively
* Naturaldocs (optional), if you wish to build the standard library documentation

h3. Debian-based Linux distributions

You can install all the prerequisites you need to build Rust by running

@sudo apt-get install python3 make git g++ curl valgrind texinfo@

On 64-bit systems, you'll also need: 

@sudo apt-get install g++-multilib ia32-libs@

h3. Arch Linux

See "the information on multilib setups":https://wiki.archlinux.org/index.php/Arch64_FAQ#Multilib_Repository_-_Multilib_Project.

h3. Windows

We recommend developing under the newest "MSYS and MinGW":http://www.mingw.org using their auto-installer (the version dated 20110802 is known to work), and performing the build in the MSYS Shell.

For Git, we recommend "MsysGit":http://code.google.com/p/msysgit/ and if you use that you will want to put the git binary path *after* the MinGW path. So add a line like the following to your @.bashrc@:

```sh
export PATH=$PATH:/c/Program\ Files/Git/bin
```


h2. Downloading and building Rust

```sh
git clone git://github.com/graydon/rust.git
cd rust
mkdir build
cd build
../configure
make check
```

This will build and test the compiler and standard library.

*Note:* On Linux or OS X, if you have Valgrind installed, the tests will run slowly because they are running under Valgrind. If you define @CFG_DISABLE_VALGRIND=1@ in your build environment or run configure with the @--disable-valgrind@ flag, you can see the tests running at full speed.

If you are going to be hacking on the Rust compiler itself then it is recommended that you configure with @--disable-optimize@, since this will greatly speed up your compilation.

h2. Navigating

There's a quick guide to the source of the compiler in src/comp/README. You should probably look through it if you're going to be contributing.

h2. Editor support

Syntax highlighting for vim is included in the Rust repository, under src/etc/vim. There is also a "rust-mode for emacs":http://github.com/marijnh/rust-mode and "a BBEdit plugin":https://github.com/erikrose/rust-bbedit-plugin.

h2. The issue tracker

We use the "GitHub issue tracker":https://github.com/graydon/rust/issues to track bugs and feature requests in Rust.  If you prefer not to use the standard GitHub issue tracker, there's a "secondary front-end that is quite a bit more responsive":http://githubissues.heroku.com/#graydon/rust and a "tertiary front-end that is pleasantly minimal":http://izs.no.de/graydon/rust.

h2. Picking something interesting to do

To get an idea of where we're going, see the [[Roadmap]].

The way most people seem to get involved is by simply trying to write Rust code. Inevitably you will hit a bug or missing feature, at which point you may feel compelled to write a patch.

Another way to get involved is to look through the issue tracker for "open issues tagged with 'easy'":https://github.com/graydon/rust/issues?labels=easy&sort=updated&direction=desc&state=open&page=1, or with "'unassigned'":https://github.com/graydon/rust/issues?labels=unassigned&sort=updated&direction=desc&state=open&page=1, or "both":https://github.com/graydon/rust/issues?labels=unassigned&sort=created&direction=desc&state=open&page=1. Issues marked "'feature'":https://github.com/graydon/rust/issues?labels=feature&sort=updated&direction=desc&state=open&page=1 tend to describe the most interesting tasks, so those marked "'feature' + 'easy' + 'unassigned'":https://github.com/graydon/rust/issues?labels=easy%2Cfeature%2Cunassigned&sort=created&direction=desc&state=open&page=1 may be both approachable and engaging.

Outstanding bugs or feature requests in Rust often have a corresponding test in the test suite that doesn't yet pass.  One good way to jump into Rust development is to look for files in the test/run-pass directory containing the string 'xfail-test'.  Those are all bugs that need to be fixed or features that someone needs to finish.

The source is also littered with hundreds of comments marked with 'FIXME' and 'TODO'. Often these refer to issues that have already been resolved or which may be resolved easily, though sometimes their purpose is rather more obscure. It can occasionally be profitable to grep through the source trying to trim these down.

If in doubt, ask on IRC. Somebody will surely have a task that needs doing.

h2. Communicating

Join irc.mozilla.org #rust for real-time discussion of Rust development.  We try to remain on that channel during working hours in UTC-7 (US Pacific).

Join the "mailing list":https://mail.mozilla.org/listinfo/rust-dev for longer conversations.

In both cases, please follow the conduct guidelines on the [[Development policy]] page.