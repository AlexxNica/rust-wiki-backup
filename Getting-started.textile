h3. Prerequisites

Version numbers listed here are "what we're using"; the code may well work with earlier versions of these tools, we do not know minimum version requirements.

* A recent Linux, OS X or Win32 system
* "Python 3.1":http://www.python.org/download/ (versions as old as Python 2.6.2 have also been used successfully)
* GNU make 3.81
* git 1.7
* g++ 4.4 at least on linux, 4.5 on win32, and the 4.x gcc in Apple's SDK for OS X.
* curl
* Valgrind 3.5 (recommended but not required for Linux)
* Texinfo's makeinfo and/or texi2pdf commands, if you wish to build HTML or PDF docs, respectively
* A recent LLVM SVN revision, built for x86 (not x64 if you have one!).  See the directions below for how to build LLVM.

h4. Debian-based Linux distributions

You can install all the prerequisites you need to build Rust by running

@sudo apt-get install python3 make git g++ curl valgrind texinfo@

On 64-bit systems, you'll also need: 

@sudo apt-get install g++-multilib ia32-libs@

h4. Windows

We recommend developing under the newest "MinGW packages":http://www.mingw.org using their auto-installer.

For Git, we recommend "MsysGit":http://code.google.com/p/msysgit/ and if you use that you will want to put the git binary path *after* the MinGW path. So add a line like:
```
export PATH=$PATH:/c/Program\ Files/Git/bin
```
To your @.bashrc@

h3. Installing LLVM

Rust requires a 3.0svn build of LLVM, at or after *revision 135178*. Follow the instructions on "Clang's Getting Started page":http://clang.llvm.org/get_started.html to check out LLVM (and Clang, if you like), but don't follow the build instructions on that page -- see below.*

```sh
svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
```

Rust regularly incorporates new features and fixes from LLVM, so it's best to just assume that the very latest LLVM SVN revision is required.  Unfortunately, because Rust is building against LLVM's trunk, not every revision will work correctly.  If you find that Rust doesn't build with your version of LLVM, then ask on IRC and somebody will tell you which revision is working for them.

If you're using clang, you will also need to check out compiler-rt *revision 131034* (later revisions are broken):
```sh
cd llvm/projects
svn co -r131034 http://llvm.org/svn/llvm-project/compiler-rt/trunk compiler-rt
```

h4. Building LLVM

Because Rust doesn't support x86-64 yet, you may need to configure LLVM using some special flags. On the Mac, use:

```sh
cd llvm
CXX='g++ -m32' CC='gcc -m32' CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 ./configure --disable-bindings --{build,host,target}=i686-apple-darwin --enable-targets=x86,x86_64,cbe --enable-optimized
make
sudo make install
```

On 64-bit Linux, use:
```sh
cd llvm
CXX='g++ -m32' CC='gcc -m32' CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 ./configure --disable-bindings --{build,host,target}=i686-unknown-linux-gnu --enable-targets=x86,x86_64,cbe --enable-optimized
make
sudo make install
```

On 32-bit Linux @./configure --enable-optimized; make; make install@ should be sufficient.  If you omit the @--enable-optimized@ flag, it'll work, but more slowly.

h3. Mingw-cross

Rust occasionally works under mingw-cross compilation on linux. This is *experimental* but can sometimes lead to a more pleasant windows development experience. To configure LLVM for this, do the following:

```
# assuming llvm is in $SRCROOT/llvm and rust in $SRCROOT/rust
$ sudo apt-get install wine1.2 mingw{,-binutils,-runtime} 
$ cd $SRCROOT
$ mkdir llvm-{build,inst}-mingw; cd llvm-build-mingw
$ STRIP=i586-mingw32msvc-strip NM=i586-mingw32msvc-nm CXX=i586-mingw32msvc-g++ CC=i586-mingw32msvc-gcc LD=i586-mingw32msvc-ld AS=i586-mingw32msvc-as RANLIB=i586-mingw32msvc-ranlib ../llvm/configure --prefix=$SRCROOT/llvm-inst-mingw32/ --disable-bindings --build=i686-unknown-linux-gnu --{host,target}=i586-mingw32 --enable-targets=x86,x86_64 --enable-optimized
$ make && make install
$ cd $SRCROOT/rust
$ mkdir mingw-build; cd mingw-build
$ CFG_LLVM_ROOT=$SRCROOT/llvm-inst-mingw32/ CFG_LLVM_CONFIG=$SRCROOT/llvm-inst-mingw32/bin/llvm-config ../configure --enable-mingw-cross
```
If you are tremendously lucky and patient, you may convince that to work. But as mentioned above, *experimental*. We'll support this when we can.

h3. Downloading and building Rust

<pre>
<code>
$ git clone git://github.com/graydon/rust.git
$ cd rust
$ mkdir build
$ cd build
$ ../configure
$ make check
</code>
</pre>
This will build and test the compiler and standard library.

*Note:* On Linux or OS X, if you have Valgrind installed, the tests will run slowly because they are running under Valgrind. If you define @CFG_DISABLE_VALGRIND=1@ in your build environment or run configure with the @--disable-valgrind@ flag, you can see the tests running at full speed.

For development, it is recommended that you configure with @--disable-optimize@, since this will greatly speed up your compilation.

h3. Navigating

There's a quick guide to the source of the compiler in src/comp/README. You should probably look through it if you're going to be contributing.

h3. The issue tracker

We use the "GitHub issue tracker":https://github.com/graydon/rust/issues to track bugs and feature requests in Rust.  If you prefer not to use the standard GitHub issue tracker, there's a "secondary front-end that is quite a bit more responsive":http://githubissues.heroku.com/#graydon/rust and a "tertiary front-end that is pleasantly minimal":http://izs.no.de/graydon/rust.

h3. Picking something interesting to do

We've recently transitioned off the bootstrap compiler and are moving full steam ahead with the self-hosted compiler. To get an idea of where we're going, see the [[Roadmap]].

Outstanding bugs or feature requests in Rust typically have a corresponding test in the test suite that doesn't yet pass.  One good way to jump into Rust development is to look for files in the test/run-pass directory containing the string 'xfail-stage1'.  Those are all bugs that need to be fixed or features features that someone needs to finish.  Another way to get involved is to look through the issue tracker for "open issues tagged with 'easy'":https://github.com/graydon/rust/issues?labels=easy&sort=updated&direction=desc&state=open&page=1, or with "'unassigned'":https://github.com/graydon/rust/issues?labels=unassigned&sort=updated&direction=desc&state=open&page=1, or both.

If in doubt, ask on IRC. Somebody will surely have a task that needs doing.

h3. Communicating

Join irc.mozilla.org #rust if you want to discuss anything more "interactively".  We try to remain on that channel during working hours in UTC-7 (US Pacific).

Join the "mailing list":https://mail.mozilla.org/listinfo/rust-dev if you want to have longer conversations.

In both cases, please follow the conduct guidelines on the [[Development policy]] page.